;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-149) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)

; An N is one of:
; - 0
; - (add1 N)
; *interpretation* represents the counting numbers


; N Any -> List-of-strings
; creates a list of n copies of s

(check-expect (copier 0 "hello") '())
(check-expect (copier 1 "hello") (cons "hello" '()))
(check-expect (copier 2 "hello")
              (cons "hello" (cons "hello" '())))

(define (copier n s)
  (cond
    [(zero? n) '()]
    [(positive? n)
     (cons s (copier (sub1 n) s))]))

;; --ex-149
;; Does copier function properly when you apply it
;; to a natural number and a Boolean or an image?
;; Or do you have to design another function?

;; The copier function will work for any natural
;; number and any data type. Whether that is a
;; number, boolean, string or image.
;; The function does not discriminate between what
;; the list is on the list, the only change will
;; be in the function signature to reflect this.

(define c1 (circle 3 "solid" "red"))

(copier 3 20) ;; 3 20's
(copier 3 #false) ;; 3 #f
(copier 3 c1)

(define-struct Something [x y z])
; Something is a structure:
;  (make-Something Number String Image)
; *interpretation*
; (make-Something n s img) describes something
; with a Number n, a String s, and an Image
; img
(define something1 (make-Something 20 "red" c1))

(copier 3 something1)

;; An alternative definition of copier might use else:

(define (copier.v2 n s)
  (cond
    [(zero? n) '()]
    [else
     (cons s (copier.v2 (sub1 n) s))]))

;; How do copier and copier.v2 behave when you apply
;; them to 0.1 and "x"?
;; Explain. Use DrRacket's stepper to confirm your
;; explanation.

; (copier.v2 0.3 "s")

;; The expression above will cause infinite recursion.
;; The else in the cond expression in copier.v2
;; does not check for natural numbers, so negative
;; numbers join the stage. With negatives on the stage,
;; the dance of (sub1 n) will go on forever, hence
;; (copier.v2 (sub1 n) s) will go on forever, with no
;; (positive? ...) to stop it.
;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-133) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Sample Problem
;; You are working on the contact list for some new cell
;; phone. The phone's owner updates and consults this list
;; on various occassions. For now, you are assigned the task
;; of designing a function that consumes the list of
;; contacts and determines whether it contains the name
;; "Flatt".

; A List-of-names is one of:
; - '()
; - (cons String List-of-names)
; *interpretation* a list of contacts, by last name

; List-of-names -> Boolean
; determines whether "Flatt" is on a list-of-names

(check-expect (contains-flatt? '()) #false)
(check-expect (contains-flatt?
               (cons "Find" '())) #false)
(check-expect (contains-flatt?
               (cons "Flatt" '())) #true)
(check-expect (contains-flatt?
               (cons "A"
                     (cons "Flatt"
                           (cons "C" '()))))
              #true)
(check-expect (contains-flatt?
               (cons "A"
                     (cons "B"
                           (cons "C" '()))))
              #false)

(define (contains-flatt? alon)
  (cond
    [(empty? alon) #false]
    [(cons? alon)
     (or (string=? (first alon) "Flatt")
         (contains-flatt? (rest alon)))]))

;; ex-133
;; Here is another way of formulating the second cond
;; clause in contains-flatt?:

; ... (cond
;       [(string=? (first alon) "Flatt") #true)]
;       [else (contains-flatt? (rest alon))]) ...

;; Explain why this expression produces the same answers as
;; the or expression in the version of fig. 47. Which
;; version is clearer to you? Explain.
;;
;; The version in fig. 47 is clearer because it is
;; formulated according to the data definition of a
;; List-of-names, therefore the self-referential bit
;; of the function is expected.
;;
;; The other version, though correct, is not designed
;; according to the data definition.

(contains-flatt?
  (cons "A" (cons "B" (cons "C" '()))))
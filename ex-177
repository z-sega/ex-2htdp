;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-177) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(define-struct editor [pre post])
; An Editor is a structure:
;   (make-editor Lo1s Lo1s)
; An Lo1s is one of:
; - '()
; - (cons 1String Lo1s)
(define good
  (cons "g" (cons "o" (cons "o" (cons "d" '())))))
(define all
  (cons "a" (cons "l" (cons "l" '()))))
(define lla
  (cons "l" (cons "l" (cons "a" '()))))
; *interp.* (make-editor pre post) means the letters
; pre precede the cursor in reverse order, and those
; in post succeed it. The combined test is:
; (string-append (implode (rev pre))
;                (implode post))

; data example 1:
(make-editor all good)

; data example 2:
(make-editor lla good) ; based on chosen interpretation


; Lo1s -> Lo1s
; produces a reverse version of the given list

(check-expect (rev '()) '())
(check-expect (rev (cons "a" '())) (cons "a" '()))
(check-expect (rev (cons "a" (cons "b" (cons "c" '()))))
              (cons "c" (cons "b" (cons "a" '()))))

(define (rev l)
  (cond
    [(empty? l) '()]
    [(cons? l) (add-at-end (rev (rest l))
                           (first l))]))

; Lo1s 1String -> Lo1s
; creates a new list by adding s to the end of l

(check-expect (add-at-end '() "a")
              (cons "a" '()))
(check-expect (add-at-end (cons "c" (cons "b" '())) "a")
              (cons "c" (cons "b" (cons "a" '()))))

(define (add-at-end l s)
  (cond
    [(empty? l) (cons s '())]
    [(cons? l) (cons (first l)
                     (add-at-end (rest l) s))]))


;; ex-177
;; Design the function create-editor. The function consumes
;; two strings and produces an Editor. The first string is
;; the text to the left of the cursor and the second string
;; is the text to the right of the cursor. The rest of the
;; section relies on this function.


; String String -> Editor
; Consumes pre and post, where pre comes before the cursor
; and post succeeds the cursor

(check-expect (create-editor "all" "good")
              (make-editor (explode "lla") (explode "good")))

(define (create-editor pre post)
  (make-editor (rev (explode pre))
               (explode post)))


(require 2htdp/universe)
(require 2htdp/image)

(define HEIGHT 20)
(define WIDTH 200)
(define FONT-SIZE 16)
(define FONT-COLOR "black")

(define MT (empty-scene WIDTH HEIGHT))
(define CURSOR (rectangle 1 HEIGHT "solid" "red"))


; Editor -> Image
; renders an editor as an image of the two texts
; separated by the cursor
(define (editor-render e) MT)


; Editor KeyEvent -> Editor
; deals with a key event, given some editor

(check-expect (editor-kh (create-editor "" "") "e")
              (create-editor "e" ""))
(check-expect (editor-kh (create-editor "cd" "fgh") "e")
              (create-editor "cde" "fgh"))
; - "\b" (delete)
(check-expect (editor-ky (create-editor "cd" "fgh") "\b")
              (create-editor "c" "fgh"))
(check-expect (editor-ky (create-editor "" "fgh") "\b")
              (create-editor "" "fgh"))
; - "left" (nav)
(check-expect (editor-ky (create-editor "cd" "fgh") "left")
              (create-editor "c" "dfgh"))
(check-expect (editor-ky (create-editor "" "fgh") "left")
              (create-editor "" "fgh"))
; - "right" (nav)
(check-expect (editor-ky (create-editor "cd" "fgh") "right")
              (create-editor "cdf" "gh"))
(check-expect (editor-ky (create-editor "cd" "") "right")
              (create-editor "cd" ""))
; - "up" or "down" (do-nothing)
(check-expect (editor-ky (create-editor "cd" "fgh") "up")
              (create-editor "cd" "fgh"))
(check-expect (editor-ky (create-editor "cd" "") "down")
              (create-editor "cd" ""))

(define (editor-kh ed ke)
  (cond
    [(key=? k "left") ...]
    [(key=? k "right") ...]
    [(key=? k "\b") ...]
    [(key=? k "\t") ...]
    [(key=? k "\r") ...]
    [(= (string-lenghth k) 1) ...]
    [else ...]))


; main: String -> Editor
; launches the editor given some initial string
(define (main s)
  (big-bang (create-editor s " ")
    [on-key editor-kh]
    [to-draw editor-render]))







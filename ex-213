;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-213) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)

; ---

(define LOCATION "/usr/share/dict/words")

; LStrings is one of:
; - '()
; - (cons String LStrings)
(define ls1 (list "dfksl" "fish" "chair" "rabbi"))

; The Dictionary is a LStrings (short for List-of-Strings).
(define DICTIONARY (read-lines LOCATION))

; ---

;; *Sample Problem*
;; Given a word, find all words that are made up from
;; the same letters. For example "cat" also spells "act".


;; ex-213
;; Design insert-everywhere/in-all-words. It consumes a
;; 1String and a list of words. The result is a list of words
;; like its second argument, but with the first argument
;; inserted at the beginning, between all letters, and at the end
;; of all words of the given list.
;;
;; Start with a complete wish-list entry. Supplement it with
;; tests for empty lists, a list with a one-letter word, and
;; another list with a two-letter word, and the like.
;; Before you continue, study the followign three hints
;; carefully.
;;
;; *Hints*
;; 1. Recondiser the example from above. It says that "d" needs
;; to be inserted into the words (list "e" "r")
;; and (list "r" "e").
;; The following application is therefore one natural candidate
;; for an example:
;;
; (insert-everywhere/in-all-words "d"
;    (cons (list "e" "r")
;      (cons (list "r" "e")
;        '())))
;;
;; 2. You want to use the BSL+ operation append, which consumes
;; two lists and produces the concatenation of the two lists:
;;
; > (append (list "a" "b" "c") (list "d" "e")
; (list "a" "b" "c" "d" "e")
;;
;; The development of functions like append is the subject of
;; Simultaneous Processing.
;;
;; 3. This solution of this exercises is a series of functions.
;; Patiently stick to the design recipe and systematically work
;; through your wish list.



; A Word is one of:
; - '()
; - (cons 1String Word)
; *interpretation*
; a Word is a list of 1Strings (letters)
(define w-to (list "t" "o"))
(define w-cat (list "c" "a" "t"))
(define w-dear (list "d" "e" "a" "r"))
  
; LWords is one of:
; - '()
; - (cons Word LWords)
(define lw1 (list w-cat w-dear))
(define lw2 (list (list "t" "o")
                  (list "o" "t")))


; Word -> LWords
; creates all rearrangements of the letters in w
(check-expect (arrangements '()) (list '()))
(check-expect (arrangements w-to) lw2)

(define (arrangements w)
  (cond
    [(empty? w) (list '())]
    [else
     (insert-everywhere/in-all-words (first w)
                                     (arrangements (rest w)))]))


; 1String LWords -> LWords
; inserts 1s at the beginning, between all letters,
; and at the end of all words of the given list lw.
(check-expect (insert-everywhere/in-all-words
               "d"
               (list (list "e" "r")
                     (list "r" "e")))
              (list (list "d" "e" "r")
                    (list "d" "r" "e")
                    (list "e" "d" "r")
                    (list "r" "d" "e")
                    (list "e" "r" "d")
                    (list "r" "e" "d")))

(define (insert-everywhere/in-all-words 1s lw)
  (cond
    [(empty? lw) '()]
    [else (append (insert-everywhere/in-word 1s (first lw))
                  (insert-everywhere/in-all-words 1s (rest lw)))]))


; 1String Word -> LWord
; inserts 1s at the beginning, between all letters,
; and at the end of given w.
(check-expect (insert-everywhere/in-word "d" '()) '())
(check-expect (insert-everywhere/in-word "d" (list "e" "r"))
              (list (list "d" "e" "r")
                    (list "e" "d" "r")
                    (list "e" "r" "d")))

(define (insert-everywhere/in-word 1s w)
  (cond
    [(empty? w) '()]
    [else
     (cons (first w)
           (insert-everywhere/in-word 1s (rest w)) ...)]))
   


; LStrings -> LStrings
; picks out all those Strings that occur in the dictionary.
(check-expect (in-dictionary '()) '())
(check-expect (in-dictionary ls1) (list "fish" "chair" "rabbi"))

(define (in-dictionary ls)
  (cond
    [(empty? ls) '()]
    [else (if (in-dictionary? (first ls))
              (cons (first ls)
                    (in-dictionary (rest ls)))
              (in-dictionary (rest ls)))]))

; String -> Boolean
; #t if s is in the DICTIONARY
(check-expect (in-dictionary? "qazwsx") #f)
(check-expect (in-dictionary? "cat") #t)

(define (in-dictionary? s)
  (member? s DICTIONARY))

; LWords -> LStrings
; converts all Words in lw to Strings
(check-expect (words->strings '()) '())
(check-expect (words->strings lw1) (list "cat" "dear"))

(define (words->strings lw)
  (cond
    [(empty? lw) '()]
    [else (cons (word->string (first lw))
                (words->strings (rest lw)))]))

; String -> Word
; converts s to a Word
(check-expect (string->word "") '())
(check-expect (string->word "cat") (list "c" "a" "t"))

(define (string->word s)
  (explode s))
  
; Word -> String
; converts w to a String
(check-expect (word->string '()) "")
(check-expect (word->string w-cat) "cat")

(define (word->string w)
  (implode w))

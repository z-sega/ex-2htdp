;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-189) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ex-189
;; Here is the function search:

(define l (list 5 6 4))
(define l-sorted (list 6 5 4))

; Number List-of-numbers -> Boolean
; checks if the given n is in the list alon

(check-expect (search 7 '()) #f)
(check-expect (search 7 l) #f)
(check-expect (search 6 l) #t)
(check-expect (search 5 l) #t)

(define (search n alon)
  (cond
    [(empty? alon) #false]
    [else (or (= (first alon) n)
              (search n (rest alon)))]))

;; It determines whether some number occurs in
;; a list of numbers. The function may have to
;; traverse the entire list to find out that the
;; number of interest isn't contained in the list
;; 
;; Develop the function search-sorted, which
;; determines whether a number occurs in a sorted
;; list of numbers. The function must take advantage
;; of the facts that the list is sorted.

; Number List-of-numbers -> Boolean
; checks if the given n is in the sorted (desc.) alon

(check-expect (search-sorted 7 '()) #f)
(check-expect (search-sorted 7 l-sorted) #f)
(check-expect (search-sorted 6 l-sorted) #t)
(check-expect (search-sorted 5 l-sorted) #t)

(define (search-sorted n alon)
  (cond
    [(empty? alon) #false]
    [else (if (> n (first alon))
              #f
              (or (= n (first alon))
                  (search-sorted n (rest alon))))]))

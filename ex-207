;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-207) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/itunes)

;; ex-207
;; Design total-time/list, which consumes an LLists and
;; produces the total amount of play time.
;;
;; *Hint* Solve exercise 206 first.
;;
;; Once you have completed the design, compute the total
;; play time of your iTunes collection. Compare this result
;; with the time that the total-time function from exercise
;; 200 computes. Why is there a difference?

;; There is a difference because in the LAssoc data
;; representation of an iTunes track, properties/attributes
;; of the track such as the "Album" could be missing.
;; When either the "play#" or the "time" attribute are
;; not stored in an LAssoc, then the play-time for that
;; track is 0. Unlike the total-time function (from ex-200)
;; the create-track won't create-track unless it matches
;; the data representation for the Track structure.
;; Proof: (length list-tracks) > (length itunes-tracks)

; A BSDN is one of:
; - Boolean
; - Number
; - String
; - Date
;; ... imagine Boolean, Number, and String examples
(define d1 (create-date 2002 7 17 3 55 14))

(define d2 (create-date 2007 5 3 13 30 0))
(define d3 (create-date 2011 5 17 17 35 13))
(define d4 (create-date 2023 1 6 11 35 13))
(define d5 (create-date 2023 5 17 17 38 47))


; An Association is a list of two items:
;   (cons String (cons BSDN '()))
(define a1 (list "Name" "Wild Child"))
(define a2 (list "Artist" "Enya"))
(define a3 (list "Album" "A Day Without Rain"))
(define a4 (list "Total Time" 227996))
(define a5 (list "Track Number" 2))
(define a6 (list "Date Added" d1))
(define a7 (list "Play Count" 20))
(define a8 (list "Play Date UTC" d2))

(define a9 (list "Name" "Modern Drummer"))
(define a10 (list "Artist" "Ungdomskulen"))
(define a11 (list "Album" "Cry-Baby"))
(define a12 (list "Total Time" 326000))
(define a13 (list "Track Number" 4))
(define a14 (list "Date Added" d3))
(define a15 (list "Play Count" 60))
(define a16 (list "Play Date UTC" d4))

(define a17 (list "Name" "Only Time"))
(define a18 (list "Artist" "Enya"))
(define a19 (list "Album" "A Day Without Rain"))
(define a20 (list "Total Time" 227996))
(define a21 (list "Track Number" 3))
(define a22 (list "Date Added" d1))
(define a23 (list "Play Count" 18))
(define a24 (list "Play Date UTC" d5))

(define a25 (list "Name" "Feels Like Home"))
(define a26 (list "Artist" "Ungdomskulen"))
(define a27 (list "Album" "Cry-Baby"))
(define a28 (list "Total Time" 315000))
(define a29 (list "Track Number" 3))
(define a30 (list "Date Added" d3))
(define a31 (list "Play Count" 5))
(define a32 (list "Play Date UTC" d4))


; An LAssoc is one of:
; - '()
; - (cons Association LAssoc)
(define la1 (list a1 a2 a3 a4 a5 a6 a7 a8))
(define la2 (list a9 a10 a11 a12 a13 a14 a15 a16))
(define la3 (list a17 a18 a19 a20 a21 a22 a23 a24))
(define la4 (list a25 a26 a27 a28 a29 a30 a31 a32))


; An LLists is one of:
; - '()
; - (cons LAssoc LLists)
(define ll1 (list la1 la3))
(define ll2 (list la2 la4))
(define ll3 (list la1 la2 la3 la4))

;; ----

; String LAssoc Any -> Association
; returns the first Association whose first item is
; equal to k in la, or default if there is no
; such Association
(check-expect (find-association "Name" '() #f) #f)
(check-expect (find-association "Name" la1 #f) "Wild Child")
(check-expect (find-association "Play Date UTC" la1 #f) d2)

(define (find-association k la d)
  (cond
    [(empty? la) d]
    [else
     (if (is-association? k (first la))
         (second (first la))
         (find-association k (rest la) d))]))


; String Association -> Boolean
; #t if k is the key for a
; *implementation-detail* Association is
; always a list of two elements
(check-expect (is-association? "fish" a1) #f)
(check-expect (is-association? "Name" a1) #t)

(define (is-association? k a)
  (string=? k (first a)))


; LLists -> Number
; computes the total amount of play time in ll
(check-expect (total-time/list '()) 0)
(check-expect (total-time/list ll3) (+ 227996 326000 227996 315000))

(define (total-time/list ll)
  (cond
    [(empty? ll) 0]
    [else (+ (play-time (first ll))
             (total-time/list (rest ll)))]))


; LAssoc -> Number
; computes the number of play-time in la
(check-expect (play-time la1) 227996)
(check-expect (play-time la2) 326000)

(define (play-time la)
  (find-association "Total Time" la 0))

;; ----

; modify the following to use your chosen name
(define ITUNES-LOCATION "./data/itunes.xml")

; LLists
(define list-tracks
  (read-itunes-as-lists ITUNES-LOCATION))

;(total-time/list list-tracks)

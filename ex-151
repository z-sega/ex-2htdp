;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-151) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))


; An N is one of:
; - 0
; - (add1 N)
; *interpretation*
; represents the set of counting/natural numbers

;; ex-151
;; Design the function multiply. It consumes a natural number n
;; and multiplies it with a number x without using *.

; Number N -> Number
; Returns the multiplication of x by n

(check-expect (multiply 3 0) (* 3 0))
(check-expect (multiply 3 1) (* 3 1))
(check-expect (multiply 3 2) (* 3 2))
(check-expect (multiply 3 5) (* 3 5))

(define (multiply x n)
  (cond
    [(zero? n) 0]
    [(positive? n)
     (+ x
        (multiply x (sub1 n)))]))

;; Use DrRacket's stepper to evaluate (multiply 3 x) for any
;; x you like. How does multiply relate to what you know
;; from grade school?

;; multiply relates to the act of
;; multiplication by addition.
;; For example, if I wanted to multiply 3 by 2. I start
;; from 0, and then add 3 twice.



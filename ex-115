;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-115) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

(define MESSAGE
  "traffic light expected, given some other value")

; Any Any -> Boolean
; are the two values elements of TrafficLight and
; if so, are they equal

(check-expect (light=? "red" "red") #true)
(check-expect (light=? "red" "green") #false)
(check-expect (light=? "green" "green") #true)
(check-expect (light=? "yellow" "yellow") #true)
(check-error (light=? "yellow" 3)
             (string-append "second-arg ->" MESSAGE))
(check-error (light=? 3 "yellow")
             (string-append "first-arg ->" MESSAGE))

(define (light=? a-value another-value)
  (cond
    [(not (light? a-value))
     (error (string-append "first-arg ->" MESSAGE))]
    [(not (light? another-value))
     (error (string-append "second-arg ->" MESSAGE))]
    [else (string=? a-value another-value)]))
    
  
; Any -> Boolean
; is the given value an element of TrafficLight

(check-expect (light? "red") #t)
(check-expect (light? "green") #t)
(check-expect (light? "yellow") #t)
(check-expect (light? "rice") #f)
(check-expect (light? 10) #f)

(define (light? x)
  (cond
    [(string? x) (or (string=? "red" x)
                     (string=? "green" x)
                     (string=? "yellow" x))]
    [else #false]))

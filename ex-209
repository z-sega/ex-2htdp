;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-209) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)

;; *Sample Problem*
;; Given a word, find all words that are made up from
;; the same letters. For example "cat" also spells "act".


;; ex-209
;; The above leaves us with two additional wishes: a function
;; that consumes a String and produces its corresponding Word,
;; and a function for the opposite direction.
;; Look up the data definition for Word in the next section
;; complete the definitions of string->word and word-string.
;; *Hint*
;; You may wish to look in the list of functions that BSL
;; provides.

; A Word is one of:
; - '()
; - (cons 1String Word)
; *interpretation*
; a Word is a list of 1Strings (letters)

;; Here are the wish-list entries:

; LWords -> LStrings
; turns all Words in low into Strings
(define (words->strings lw) '())

; LStrings -> LStrings
; picks out all those Strings that occur in the dictionary.
(define (in-dictionary ls) '())

; String -> Word
; computes a Word from s
(check-expect (string->word "") '())
(check-expect (string->word "cat") (list "c" "a" "t"))

(define (string->word s)
  (explode s))
  
; Word -> String
; computes a String from w
(check-expect (word->string '()) "")
(check-expect (word->string (list "c" "a" "t")) "cat")

(define (word->string w)
  (implode w))

; ---

(define LOCATION "/usr/share/dict/words")

; A Dictionary is a LStrings (short for List-of-Strings).
(define AS-LIST (read-lines LOCATION))

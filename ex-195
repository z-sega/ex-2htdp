;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-195) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)

(define LOCATION "/usr/share/dict/words")

; A List-of-Strings is one of:
; - '()
; - (cons String List-of-Strings)
(define sm-l (list "Albarn"
                   "allen"
                   "barn"
                   "bishop"
                   "Ken"
                   "vision"
                   "zed"
                   "Zebra"))

; A Dictionary is a List-of-Strings.
(define AS-LIST (read-lines LOCATION))

; A Letter is one of the following 1Strings:
; - "a"
; - ...
; - "z"
; or, equivalently, a member? of this list:
(define LETTERS
  (explode "abcdefghijklmnopqrstuvwxyz"))


;; -- ex-195
;; Design the function starts-with#, which consumes a Letter
;; and Dictionary and then counts how many words in the given
;; Dictionary start with the given Letter. Once you know
;; that your functions works, determine how many words
;; start with "e" in your computer's dictionary and
;; how many with "z".


; Letter Dictionary -> Number
; counts the number of words in los that start with l
(check-expect (starts-with# "f" sm-l) 0)
(check-expect (starts-with# "z" sm-l) 2)
(check-expect (starts-with# "b" sm-l) 2)

(define (starts-with# l los)
  (cond
    [(empty? los) 0]
    [else (+ (if (starts-with? l (first los))
                 1
                 0)
             (starts-with# l (rest los)))]))


; Letter String -> Boolean
; #t if the string s begins with the letter l
; cap-insensitive
(check-expect (starts-with? "z" "zebra") #t)
(check-expect (starts-with? "a" "zebra") #f)
(check-expect (starts-with? "z" "Zebra") #t)
(check-expect (starts-with? "" "zebra") #f)

(define (starts-with? l s)
  (string=? (string-downcase l)
            (string-downcase (first (explode s)))))


; checkout real-data:
(starts-with# "e" AS-LIST)
;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname drawing-polygons) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)

;; Sample Problem
;; Design a function that adds a polygon to a
;; given scene.

; A Polygon is one of:
; - (cons Posn (cons Posn (cons Posn '())))
; - (cons Posn Polygon)
;
; -or- (in short-form)
;
; A Polygon is one of:
; - (list Posn Posn Posn)
; - (cons Posn Polygon)
(define triangle-p
  (list (make-posn 20 10)
        (make-posn 20 20)
        (make-posn 30 20)))

(define square-p
  (list (make-posn 10 10)
        (make-posn 20 10)
        (make-posn 20 20)
        (make-posn 10 20)))
        

; a plain background image
(define MT (empty-scene 50 50))

; Image Polygon -> Image
; renders the given polygon p into img

(check-expect (render-poly MT triangle-p)
              (scene+line
               (scene+line MT 20 20 30 20 "red")
               20 10 20 20 "red"))

(check-expect (render-poly MT square-p)
              (scene+line
               (scene+line
                (scene+line MT 10 10 20 10 "red")
                20 10 20 20 "red")
               20 20 10 20 "red"))
              
(define (render-poly img p)
  (cond
    [(empty? (rest (rest (rest p))))
     (render-line
       (render-line
         (render-line MT (first p) (second p))
         (second p) (third p))
       (third p) (first p))]
    [else
     (render-line (render-poly img (rest p))
                  (first p)
                  (second p))]))
          

; Image Posn Posn -> Image
; draws a red line from Posn p to Posn q into im

(check-expect (render-line MT
                           (make-posn 10 10)
                           (make-posn 20 10))
              (scene+line MT
                          10 10
                          20 10
                          "red"))

(define (render-line im p q)
  (scene+line im
              (posn-x p) (posn-y p)
              (posn-x q) (posn-y q)
              "red"))


;; *Sample Problem*
;; Design a function that draws connections between
;; a given bunch of dots into a given scene.


; A NELoP is one of:
; - (cons Posn '())
; - (cons Posn NELoP)


; Image NELoP -> Image
; connects the dots in p by rendering lines
; in img
(define (connect-dots img p)
  (cond
    [(empty? (rest p)) img]
    [else (render-line
           (connect-dots img (rest p))
           (first p)
           (second p))]))


; Image Polygon -> Image
; adds an image of p to img
(define (render-poly.v2 img p)
  (render-line (connect-dots img p)
               (first p)
               (last p)))

; NELoP -> Posn
; extracts the last item from p
(define (last p)
  (first p))
















               

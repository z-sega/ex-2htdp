;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname ex-150) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

; An N is one of:
; - 0
; - (add1 N)
; *interpretation*
; represents the set of counting/natural numbers

;; ex-150
;; Design the function add-to-pi. It consumes a natural
;; number n and adds it to pi without using the primitive
;; + operation. Here is a start:


; N -> Number
; computes (+ n pi) without using +

(check-within (add-to-pi 0) (+ 0 pi) 0.001)
(check-within (add-to-pi 1) (+ 1 pi) 0.001)
(check-within (add-to-pi 3) (+ 3 pi) 0.001)

(define (add-to-pi n)
  (cond
    [(zero? n) pi]
    [(positive? n)
     (add1 (add-to-pi (sub1 n)))]))

;; If you want to add 1 to pi, you've
;; already added 0 to pi, so just (add1 ...) to that

;; If you want to add 2 to pi, you've already
;; added 1 to pi, so just (add1 ...) to that

;; If you want to add 3 to pi, you've alreayd
;; added 2 to pi, so just (add1 ...) to that

;; Once you have a complete definition, generalize the
;; function to add, which adds a natural number n to
;; some artitrary number x without using +. Why does
;; the skeleton use check-within?

;; N Number -> Number
;; Returns the sum of the given N n,
;; and the given Number x.

(check-within (add 0 34) 34 0.001)
(check-within (add 1 3.4) (+ 1 3.4) 0.001)
(check-within (add 5 34.5) (+ 5 34.5) 0.001)

(define (add n x)
  (cond
    [(zero? n) x]
    [(positive? n)
     (add1 (add (sub1 n) x))]))
  


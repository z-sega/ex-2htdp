;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname ex-190) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ex-190
;; Design the prefixes function, which consumes a
;; list of 1Strings and produces the list of all
;; prefixes. A list p is a prefix of l if p and l
;; are the same up through all items in p.
;; For example, (list "a" "b" "c") is a prefix
;; of itself and (list "a" "b" "c" "d").
;;
;; Design the function suffixes, which consumes a
;; list of 1Strings and produces all suffixes. A
;; list s is a suffix of l if s and l are the same
;; from the end, up through all items in s.
;; For example, (list "b" "c" "d") is a suffix of
;; itself and (list "a" "b" "c" "d").


; A Lo1s is one of:
; - '()
; - (cons 1String Lo1s)
(define l1 (list "a"))
(define l2 (list "a" "b"))
(define l3 (list "a" "b" "c"))

; A List-of-Lo1s is one of:
; - '()
; - (cons Lo1s List-of-Lo1s)
(define lp1 (list (list "a")))
(define lp2 (list (list "a")
                  (list "a" "b")))
(define lp3 (list (list "a")
                  (list "a" "b")
                  (list "a" "b" "c")))
                      
  
; Lo1s -> List-of-Lo1s
; computes a list of prefixes for the given
; list of 1Strings l

(check-expect (prefixes '()) '())
(check-expect (prefixes l1) lp1)
(check-expect (prefixes l2) lp2)
(check-expect (prefixes l3) lp3)

(define (prefixes l)
  (cond
    [(empty? l) '()]
    [else (... (first l)
               (prefixes (rest l)) ...)]))


